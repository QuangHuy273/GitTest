@page "/add-staff"
@using ExamDistribution.Data
@using ExamDistribution.Models
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject AppDbContext Db

<h3 class="text-xl font-bold mb-4">Thêm nhân viên</h3>

<EditForm Model="@staff" OnValidSubmit="HandleValidSubmit" FormName="AddStaffForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Mã nhân viên</label>
        <InputText class="form-control" @bind-Value="staff.StaffCode" />
        <ValidationMessage For="@(() => staff.StaffCode)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Tên nhân viên</label>
        <InputText class="form-control" @bind-Value="staff.Name" />
        <ValidationMessage For="@(() => staff.Name)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Email FE</label>
        <InputText class="form-control" @bind-Value="staff.AccountFe" />
        <ValidationMessage For="@(() => staff.AccountFe)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Email FPT</label>
        <InputText class="form-control" @bind-Value="staff.AccountFpt" />
        <ValidationMessage For="@(() => staff.AccountFpt)" />
    </div>

    <button type="submit" class="btn btn-primary mt-2">Lưu</button>
</EditForm>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    [SupplyParameterFromForm]
    private Staff staff { get; set; } = new();
    private string errorMessage;

    // private async Task HandleValidSubmit()
    // {
    //     errorMessage = "";

    //     var asciiOnly = new System.Text.RegularExpressions.Regex("^[\\x00-\\x7F]+$");

    //     if (!staff.AccountFe.EndsWith("@fe.edu.vn") || !staff.AccountFpt.EndsWith("@fpt.edu.vn"))
    //     {
    //         errorMessage = "Email phải kết thúc đúng đuôi @fe.edu.vn và @fpt.edu.vn.";
    //         return;
    //     }

    //     if (staff.AccountFe.Contains(" ") || staff.AccountFpt.Contains(" "))
    //     {
    //         errorMessage = "Email không được chứa khoảng trắng.";
    //         return;
    //     }

    //     if (!asciiOnly.IsMatch(staff.AccountFe) || !asciiOnly.IsMatch(staff.AccountFpt))
    //     {
    //         errorMessage = "Email không được chứa ký tự tiếng Việt.";
    //         return;
    //     }

    //     var isDuplicate = await Db.Staffs.AnyAsync(s =>
    //         s.StaffCode == staff.StaffCode ||
    //         s.AccountFe == staff.AccountFe ||
    //         s.AccountFpt == staff.AccountFpt
    //     );

    //     if (isDuplicate)
    //     {
    //         errorMessage = "Mã hoặc email đã tồn tại.";
    //         return;
    //     }

    //     staff.Id = Guid.NewGuid().ToString();
    //     staff.Status = 1;
    //     staff.CreatedDate = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
    //     staff.LastModifiedDate = staff.CreatedDate;

    //     Db.Staffs.Add(staff);
    //     await Db.SaveChangesAsync();

    //     Navigation.NavigateTo("/");
    // }
}
